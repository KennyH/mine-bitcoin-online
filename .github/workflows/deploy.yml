---
name: Deploy Terraform & Next to AWS

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev # maps to main branch
          - prod # maps to prod branch

jobs:
  terraform:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    env:
      TF_VAR_environment: ${{ inputs.environment }}
      TF_VAR_domain_name: ${{ inputs.environment == 'dev' && 'dev-env.bitcoinbrowserminer.com' || 'bitcoinbrowserminer.com' }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/mine-bitcoin-online-github-actions-${{ inputs.environment }}-role
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.4

      - name: Terraform Init
        working-directory: src/backend/terraform/${{ inputs.environment }}
        run: terraform init
      
      # # TEMPORARY: Destroy the Cognito User Pool resource
      # - name: Terraform Destroy Cognito User Pool (TEMPORARY)
      #   working-directory: src/backend/terraform/${{ inputs.environment }}
      #   run: terraform destroy -auto-approve -target=module.btcminer_backend.aws_cognito_user_pool.user_pool

      - name: Terraform Plan
        working-directory: src/backend/terraform/${{ inputs.environment }}
        run: terraform plan

      - name: Terraform Apply
        working-directory: src/backend/terraform/${{ inputs.environment }}
        run: terraform apply -auto-approve

  deploy-nextjs:
    runs-on: ubuntu-latest
    needs: terraform

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/mine-bitcoin-online-github-actions-${{ inputs.environment }}-role
          aws-region: us-west-2
      
      - name: Set uppercase environment variable
        id: vars
        run: |
          env_upper=$(echo "${{ inputs.environment }}" | tr '[:lower:]' '[:upper:]')
          echo "ENV_UPPER=$env_upper" >> "$GITHUB_ENV"
          echo "env_upper=$env_upper" >> "$GITHUB_OUTPUT"

      - name: Setup Node.js (Latest LTS)
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        working-directory: src/website
        run: npm ci

      - name: Build Next.js static site
        working-directory: src/website
        env:
          NEXT_PUBLIC_NEXTAUTH_URL: ${{ secrets[format('{0}_NEXT_PUBLIC_NEXTAUTH_URL', steps.vars.outputs.env_upper)] }}
          NEXT_PUBLIC_COGNITO_CLIENT_ID: ${{ secrets[format('{0}_NEXT_PUBLIC_COGNITO_CLIENT_ID', steps.vars.outputs.env_upper)] }}
          NEXT_PUBLIC_COGNITO_USER_POOL_ID: ${{ secrets[format('{0}_NEXT_PUBLIC_COGNITO_USER_POOL_ID', steps.vars.outputs.env_upper)] }}
          NEXT_PUBLIC_COGNITO_DOMAIN: ${{ secrets[format('{0}_NEXT_PUBLIC_COGNITO_DOMAIN', steps.vars.outputs.env_upper)] }}
        run: npm run build

      - name: Adding extended robots.txt for dev environment
        if: ${{ inputs.environment == 'dev' }}
        run: |
          cat << EOF > src/website/out/robots.txt
          User-agent: *
          Disallow: /

          User-agent: GPTBot
          Disallow: /

          User-agent: ChatGPT-User
          Disallow: /

          User-agent: Googlebot
          Disallow: /

          User-agent: Bingbot
          Disallow: /

          User-agent: anthropic-ai
          Disallow: /

          User-agent: ClaudeBot
          Disallow: /
          EOF

      - name: Deploy to S3 bucket
        run: |
          aws s3 sync ./src/website/out s3://mine-bitcoin-online-frontend-${{ inputs.environment }} --delete

      - name: Invalidate CloudFront Distribution
        run: |
          DISTRIBUTION_ID=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[?Origins.Items[?contains(DomainName, 'mine-bitcoin-online-frontend-${{ inputs.environment }}')]].Id | [0]" \
            --output text)

          aws cloudfront create-invalidation --distribution-id "$DISTRIBUTION_ID" --paths "/*"